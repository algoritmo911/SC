import random
import uuid
from typing import Dict, List, Any
from sc.models import KnowledgeUnit

# Mock for OpenAI API
class MockOpenAIAPI:
    def generate_text(self, prompt: str, context: Dict) -> str:
        """
        Mocks a call to OpenAI API.
        In a real scenario, this would interact with an actual LLM.
        """
        return f"Generated content for prompt: '{prompt}' with context: {context}"

    def generate_tags(self, content: str, num_tags: int = 5) -> List[str]:
        """
        Mocks tag generation based on content.
        """
        possible_tags = ["simulated", "minecraft-style", "procedural", "dynamic", "ai-generated", "blockchain", "metaverse"]
        if len(possible_tags) < num_tags:
            return random.sample(possible_tags, len(possible_tags))
        return random.sample(possible_tags, num_tags)

openai_client = MockOpenAIAPI()

def generate_ku_from_prompt(prompt: str, context: Dict) -> KnowledgeUnit:
    """
    Генерирует KU по запросу. Используется для симулятивных/игровых миров.
    """
    # 1. Generate content using a (mocked) LLM
    generated_data = openai_client.generate_text(prompt, context)

    # 2. Generate random tags
    # In a real system, tags might be derived from the prompt, context, or generated_data
    num_tags = random.randint(2, 5)
    tags = openai_client.generate_tags(generated_data, num_tags=num_tags)

    # 3. Create KnowledgeUnit instance
    # quantum_fingerprint and entropy_signature will be handled by the model's __post_init__
    ku = KnowledgeUnit(
        quantum_fingerprint="", # Will be auto-generated by __post_init__ if empty
        entropy_signature=None, # Will be auto-calculated by __post_init__ if None
        data={"prompt": prompt, "context": context, "generated_text": generated_data},
        tags=tags
        # id is auto-generated
        # linked_ku_ids defaults to empty list
    )

    return ku

if __name__ == '__main__':
    # Example usage:
    sample_prompt = "Create a block of obsidian with glowing runes."
    sample_context = {"world_seed": "alpha_omega_7", "player_level": 10}

    new_ku = generate_ku_from_prompt(sample_prompt, sample_context)

    print(f"Generated Knowledge Unit:")
    print(f"  ID: {new_ku.id}")
    print(f"  Quantum Fingerprint: {new_ku.quantum_fingerprint}")
    print(f"  Entropy Signature: {new_ku.entropy_signature}")
    print(f"  Tags: {new_ku.tags}")
    print(f"  Data: {new_ku.data}")
    print(f"  Linked KU IDs: {new_ku.linked_ku_ids}")

    another_ku = generate_ku_from_prompt("Describe a friendly NPC for a starting village.", {})
    print(f"\nAnother KU ID: {another_ku.id}, Tags: {another_ku.tags}")
